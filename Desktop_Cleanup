import pathlib
import shutil
import time
from icecream import ic
from extensions import extensions_folders
from datetime import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# Source directory folder path goes here
desktop = pathlib.Path.home() / 'Desktop'

# Destination directory folder path goes here
basePath = pathlib.Path.home()

class WatchFolder:
    """Watch user's desktop folder and move appropriate location."""

# Initialize Watcher
    def __init__(self, directory='.', handler = FileSystemEventHandler()):
        self.observer = Observer()
        self.directory = directory
        self.handler = handler    
        print("Watcher initialized")    

# Run Watcher to observe directory on a schedule
    def run(self):
        self.observer.schedule(self.handler,self.directory,recursive=True)
        self.observer.start()
        print("Watcher Running in {}/".format(self.directory))
        try:
            while True:
                time.sleep(1)
        except:
            self.observer.stop()
        self.observer.join()
        print("\nWatcher Terminated\n")

class MyEventHandler(FileSystemEventHandler):
    def on_modified(self, event):
        for extensions in extensions_folders:
            if not pathlib.Path.exists(basePath + extensions):
                pathlib.Path.mkdir(basePath)




# if __name__=="__main__":
#     w = Watcher(".", MyEventHandler())
#     w.run()